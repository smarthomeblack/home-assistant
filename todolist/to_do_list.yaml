blueprint:
  name: To-Do List Manager
  author: smarthomeblack
  description: |
    # Tool for managing a Home Assistant to-do list with LLM integration
    
    ## Blueprint Setup
    
    ### Required
    * The Home Assistant todo integration must be installed and configured.
    
    ### Optional
    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.
    
    ### Note
    * Provide a concise and precise description for the script. This will be utilized by the LLM to understand it should use this script for managing to-do items.
    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    todo_settings:
      name: Settings for To-Do List
      icon: mdi:format-list-checkbox
      description: Configure the to-do list entity for actions.
      input:
        todo_entity:
          name: To-Do List Entity
          description: The entity_id of the to-do list (e.g. todo.viec_can_lam)
          selector:
            entity:
              domain: todo
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        action_type_prompt:
          name: Action Type Prompt
          description: The prompt for the LLM to select the action type.
          selector:
            text:
              multiline: true
          default: >-
            ‚ö†Ô∏è CRITICAL WORKFLOW - CONFIRMATION RULES ‚ö†Ô∏è
            
            ACTIONS REQUIRING CONFIRMATION (STEPS 1-2-3):
            For add_item, remove_item, remove_completed_items, update_item:
            
            STEP 1: PARSE the user's request and extract all information
            STEP 2: ALWAYS CONFIRM with user BEFORE executing (MANDATORY)
            STEP 3: EXECUTE only after user explicitly confirms
            
            ACTIONS NOT REQUIRING CONFIRMATION:
            For get_items: Execute immediately without confirmation (read-only operation)
            
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            CONFIRMATION TEMPLATES FOR EACH ACTION:
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            
            1. ADD_ITEM (Requires Confirmation):
               Show in Vietnamese:
               "I will add a new task:
                üìù Name: [task_name]
                üìÑ Description: [description] (if provided)
                ‚è∞ Time: [formatted_date_time]
                Do you confirm?"
               Wait for user confirmation before executing.
            
            2. GET_ITEMS (NO Confirmation Needed):
               Execute immediately and display results.
               No confirmation step required.
            
            3. REMOVE_ITEM (Requires Confirmation - CRITICAL):
               First call get_items to retrieve item details.
               Show in Vietnamese:
               "‚ö†Ô∏è PERMANENTLY DELETE this task:
                üìù Name: [task_name]
                ‚è∞ Time: [due_date_time]
                üìä Status: [status]
                ‚ö†Ô∏è THIS CANNOT BE UNDONE!
                Type 'DELETE' or 'CONFIRM' to proceed."
               Only execute if user types exact confirmation words.
            
            4. REMOVE_COMPLETED_ITEMS (Requires Confirmation - CRITICAL):
               First call get_items to count completed items.
               Show in Vietnamese:
               "‚ö†Ô∏è DELETE ALL completed tasks:
                üìä [count] tasks will be deleted
                üö® WARNING: THIS CANNOT BE UNDONE!
                Type 'DELETE ALL' to confirm."
               Require exact phrase 'DELETE ALL' to proceed.
            
            5. UPDATE_ITEM (Requires Confirmation):
               First call get_items to retrieve current values.
               Show in Vietnamese:
               "I will update the task:
                üìù Name: [old_name] ‚Üí [new_name] (if changed)
                ‚è∞ Time: [old_time] ‚Üí [new_time] (if changed)
                üìä Status: [old_status] ‚Üí [new_status] (if changed)
                üìÑ Description: [new_description] (if changed)
                Do you confirm these changes?"
               Wait for user confirmation before executing.
            
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            IMPORTANT RULES:
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            - NEVER execute write operations without explicit user confirmation
            - GET operations do NOT require confirmation (read-only)
            - If user says "no"/"cancel"/"stop" ‚Üí DO NOT execute, cancel immediately
            - For DELETE actions: Require exact confirmation phrases
            - Always show parsed information clearly in confirmation messages
            - Wait for user response before proceeding to execution step
            
            Return exactly one of: add_item, get_items, remove_item, remove_completed_items, update_item
            
            ACTION DESCRIPTIONS:
            - add_item: Add a new to-do item (requires confirmation)
            - get_items: Retrieve list of to-do items - NO confirmation needed
            - remove_item: Permanently delete a specific item (requires confirmation + item_uid)
            - remove_completed_items: Remove all completed items (requires confirmation)
            - update_item: Update an existing item (requires confirmation + item_uid)
        task_name_prompt:
          name: Task Name Prompt
          description: The prompt for the LLM to provide the task name when adding new item.
          selector:
            text:
              multiline: true
          default: >-
            Required for: add_item
            
            Extract ONLY the core task name from the user's request.
            CRITICAL: Remove ALL time/date information from the task name.
            Time/date information belongs in due_date or due_datetime fields, NOT in task name.
            
            Examples:
            - User: "Add wash dishes for wife at 2pm tomorrow" 
              ‚Üí task_name: "Wash dishes for wife"
            - User: "Remind me to buy milk at 8am" 
              ‚Üí task_name: "Buy milk"
            - User: "Meeting with boss on October 15" 
              ‚Üí task_name: "Meeting with boss"
            - User: "Call customer at 3pm Monday"
              ‚Üí task_name: "Call customer"
            
            Return only the clean task name without any time/date references.
            No extra commentary, no markdown, no emojis.
        item_uid_prompt:
          name: Item UID Prompt
          description: The prompt for the LLM to provide the item UID for removal or update.
          selector:
            text:
              multiline: true
          default: >-
            Required for: remove_item, update_item
            
            WORKFLOW:
            1. Always call get_items FIRST to retrieve the list of items
            2. Parse the response to find the target item
            3. Extract the UID from the matching item
            4. Return only the UID value
            
            The UID is a long unique identifier (example: 6901dc38-a61a-11f0-ad85-bc24112f1158).
            
            If multiple items have the same name:
            - Use additional context from user (date, status, description) to identify the correct one
            - If still ambiguous, ask user to clarify which specific item
            
            Return only the UID string, no extra text or formatting.
        task_description_prompt:
          name: Task Description Prompt
          description: The prompt for the LLM to provide the task description.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            
            Provide detailed information about the to-do item if the user specifies it.
            If the user doesn't provide additional details, leave this field blank.
            
            Examples:
            - User: "Add go to market to buy vegetables and fruits for the whole week"
              ‚Üí description: "Buy vegetables and fruits for the whole week"
            - User: "Add meeting with boss" (no additional details)
              ‚Üí description: (leave blank)
            - User: "Add call customer to discuss the new contract terms"
              ‚Üí description: "Discuss the new contract terms"
            
            Do NOT include:
            - Links or URLs
            - Markdown formatting
            - Emojis
            - Any additional commentary
            
            Return only the plain description text.
        due_date_prompt:
          name: Due Date Prompt
          description: The prompt for the LLM to provide the due date.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            
            ‚ö†Ô∏è CRITICAL DECISION: Analyze the user's request to determine if they specify TIME or just DATE.
            
            USE THIS FIELD (due_date) ONLY IF:
            - User mentions ONLY a date WITHOUT any specific time
            - Date-only keywords: "tomorrow", "next Monday", "October 15", "end of month", "today"
            
            DO NOT USE this field if user mentions ANY TIME:
            - Time keywords: "2pm", "8 o'clock", "afternoon", "evening", "morning", "noon", "at"
            - If ANY time keyword detected ‚Üí Use due_datetime field instead, leave this blank
            
            FORMAT: YYYY-MM-DD (example: 2025-10-11)
            
            DATE CALCULATIONS (Current date: Saturday, October 11, 2025):
            - "today" ‚Üí 2025-10-11
            - "tomorrow" ‚Üí 2025-10-12
            - "Monday" / "next Monday" ‚Üí 2025-10-13
            - "next week" ‚Üí add 7 days
            - "next month" ‚Üí next month same day
            - "October 15" ‚Üí 2025-10-15
            
            RULE: Never provide both due_date and due_datetime simultaneously.
            If user specifies ANY time, leave this field BLANK and use due_datetime instead.
        due_datetime_prompt:
          name: Due Datetime Prompt
          description: The prompt for the LLM to provide the due datetime.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            
            ‚ö†Ô∏è CRITICAL DECISION: Use this field ONLY when user specifies BOTH date AND time.
            
            USE THIS FIELD (due_datetime) WHEN user mentions TIME:
            - Time keywords: "2pm", "8 o'clock", "afternoon", "morning", "noon", "evening", "night", "at"
            - Examples: "2pm tomorrow", "8am Monday", "3pm today", "tomorrow evening"
            
            DO NOT USE this field if user ONLY mentions date without time:
            - "tomorrow", "Monday", "October 15" ‚Üí Use due_date instead, leave this blank
            
            FORMAT: YYYY-MM-DD HH:MM:SS (24-hour format)
            
            EXAMPLES:
            - "2pm tomorrow" ‚Üí "2025-10-12 14:00:00"
            - "8am today" ‚Üí "2025-10-11 08:00:00"
            - "3pm Monday" ‚Üí "2025-10-13 15:00:00"
            - "10pm tonight" ‚Üí "2025-10-11 22:00:00"
            - "tomorrow morning" ‚Üí "2025-10-12 08:00:00" (use default morning time)
            
            TIME CONVERSION GUIDE (Natural language to 24-hour):
            English keywords:
            - "morning" ‚Üí 06:00-11:00 (default: 08:00)
            - "noon" ‚Üí 12:00
            - "afternoon" ‚Üí 13:00-17:00 (default: 15:00)
            - "evening" ‚Üí 18:00-22:00 (default: 19:00)
            - "night" ‚Üí 23:00-05:00 (default: 23:00)
            
            Vietnamese keywords (if user uses Vietnamese):
            - "s√°ng" (morning) ‚Üí default 08:00
            - "tr∆∞a" (noon) ‚Üí 12:00
            - "chi·ªÅu" (afternoon) ‚Üí default 15:00
            - "t·ªëi" (evening) ‚Üí default 19:00
            - "ƒë√™m" (night) ‚Üí default 23:00
            
            SPECIFIC HOURS:
            - "1-12 o'clock" without am/pm ‚Üí infer from context or use 24-hour if specified
            - "1pm-11pm" ‚Üí 13:00-23:00
            - "1am-11am" ‚Üí 01:00-11:00
            
            RULE: Never provide both due_date and due_datetime simultaneously.
            If user provides only date (no time), leave this field BLANK and use due_date instead.
        rename_prompt:
          name: Rename Prompt
          description: The prompt for the LLM to provide the new task name when updating.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: update_item ONLY
            
            Provide the new name for the to-do item ONLY if the user explicitly wants to rename it.
            If the user is only changing other properties (time, status, description), leave this field blank.
            
            Examples:
            - User: "Rename task 'Meeting with boss' to 'Meeting with director'"
              ‚Üí rename: "Meeting with director"
            - User: "Change shopping task to 3pm" (only changing time, not name)
              ‚Üí rename: (leave blank)
            - User: "Update buy milk task to buy milk and bread"
              ‚Üí rename: "Buy milk and bread"
            - User: "Mark washing dishes as completed" (only changing status)
              ‚Üí rename: (leave blank)
            
            Return only the new task name.
            No extra text, no markdown, no emojis.
        status_prompt:
          name: Status Prompt
          description: The prompt for the LLM to provide the task status.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: update_item, get_items
            
            FOR UPDATE_ITEM:
            Provide the new status ONLY if the user explicitly wants to change it.
            - "needs_action" ‚Üí Task is NOT completed yet (pending/in-progress)
            - "completed" ‚Üí Task is completed/done/finished
            If user is only changing other properties, leave this field blank.
            
            Examples:
            - User: "Mark washing dishes as completed"
              ‚Üí status: "completed"
            - User: "Change meeting task to incomplete"
              ‚Üí status: "needs_action"
            - User: "Move shopping to 3pm" (only changing time)
              ‚Üí status: (leave blank)
            
            FOR GET_ITEMS:
            Filter items by status. Can provide single or multiple values (comma-separated).
            - "needs_action" ‚Üí Retrieve only incomplete/pending tasks
            - "completed" ‚Üí Retrieve only completed/finished tasks
            - "needs_action,completed" ‚Üí Retrieve both types (all tasks)
            - Leave blank ‚Üí Retrieve all tasks regardless of status
            
            Examples:
            - User: "Show me incomplete tasks"
              ‚Üí status: "needs_action"
            - User: "List all completed tasks"
              ‚Üí status: "completed"
            - User: "Show all tasks"
              ‚Üí status: (leave blank or "needs_action,completed")
            
            Return only the status value(s): "needs_action" or "completed" or "needs_action,completed"
            No extra text or formatting.
mode: queued
max: 30
max_exceeded: silent
variables:
  version: 20251011_v2
fields:
  action_type:
    name: Action Type
    description: !input action_type_prompt
    selector:
      select:
        options:
          - add_item
          - get_items
          - remove_item
          - remove_completed_items
          - update_item
    required: true
  task_name:
    name: Task Name
    description: !input task_name_prompt
    selector:
      text:
    required: false
  item_uid:
    name: Item UID
    description: !input item_uid_prompt
    selector:
      text:
    required: false
  task_description:
    name: Task Description
    description: !input task_description_prompt
    selector:
      text:
        multiline: true
    required: false
  due_date:
    name: Due Date
    description: !input due_date_prompt
    selector:
      text:
    required: false
  due_datetime:
    name: Due Datetime
    description: !input due_datetime_prompt
    selector:
      text:
    required: false
  rename:
    name: Rename
    description: !input rename_prompt
    selector:
      text:
    required: false
  status:
    name: Status
    description: !input status_prompt
    selector:
      text:
    required: false
sequence:
  - variables:
      todo_entity: !input todo_entity
      action_type: "{{ action_type | default('get_items') | trim }}"
      task_name: "{{ task_name | default('') | trim }}"
      item_uid: "{{ item_uid | default('') | trim }}"
      task_description: "{{ task_description | default('') | trim }}"
      due_date: "{{ due_date | default('') | trim }}"
      due_datetime: "{{ due_datetime | default('') | trim }}"
      rename: "{{ rename | default('') | trim }}"
      status_input: "{{ status | default('') | trim }}"
  - alias: Validate inputs
    if:
      - condition: template
        value_template: >-
          {{
            (not todo_entity)
            or (action_type not in ['add_item', 'get_items', 'remove_item', 'remove_completed_items', 'update_item'])
            or (action_type == 'add_item' and not task_name)
            or (action_type in ['remove_item', 'update_item'] and not item_uid)
          }}
    then:
      - variables:
          response:
            error: >-
              Invalid inputs. Required fields:
              - add_item: task_name
              - remove_item: item_uid
              - update_item: item_uid
      - stop: Invalid inputs
        response_variable: response
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'add_item' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ due_datetime | length > 0 }}"
                sequence:
                  - service: todo.add_item
                    target:
                      entity_id: !input todo_entity
                    data:
                      item: "{{ task_name }}"
                      description: "{{ task_description }}"
                      due_datetime: "{{ due_datetime }}"
              - conditions:
                  - condition: template
                    value_template: "{{ due_date | length > 0 }}"
                sequence:
                  - service: todo.add_item
                    target:
                      entity_id: !input todo_entity
                    data:
                      item: "{{ task_name }}"
                      description: "{{ task_description }}"
                      due_date: "{{ due_date }}"
            default:
              - service: todo.add_item
                target:
                  entity_id: !input todo_entity
                data:
                  item: "{{ task_name }}"
                  description: "{{ task_description }}"
          - variables:
              response:
                status: "success"
                message: "Task added successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'get_items' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ status_input | length > 0 }}"
                sequence:
                  - variables:
                      status_list: >-
                        {{ status_input.split(',') | map('trim') | list }}
                  - service: todo.get_items
                    target:
                      entity_id: !input todo_entity
                    data:
                      status: "{{ status_list }}"
                    response_variable: todo_items
            default:
              - service: todo.get_items
                target:
                  entity_id: !input todo_entity
                response_variable: todo_items
          - variables:
              response:
                items: "{{ todo_items[todo_entity]['items'] }}"
                status: "success"
                message: "Items retrieved successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'remove_item' }}"
        sequence:
          - service: todo.remove_item
            target:
              entity_id: !input todo_entity
            data:
              item: "{{ item_uid }}"
          - variables:
              response:
                status: "success"
                message: "Item removed successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'remove_completed_items' }}"
        sequence:
          - service: todo.remove_completed_items
            target:
              entity_id: !input todo_entity
          - variables:
              response:
                status: "success"
                message: "All completed items removed successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'update_item' }}"
        sequence:
          - variables:
              update_data:
                item: "{{ item_uid }}"
          - if:
              - condition: template
                value_template: "{{ rename | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, rename=rename) }}"
          - if:
              - condition: template
                value_template: "{{ status_input | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, status=status_input) }}"
          - if:
              - condition: template
                value_template: "{{ task_description | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, description=task_description) }}"
          - if:
              - condition: template
                value_template: "{{ due_datetime | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, due_datetime=due_datetime) }}"
            else:
              - if:
                  - condition: template
                    value_template: "{{ due_date | length > 0 }}"
                then:
                  - variables:
                      update_data: "{{ dict(update_data, due_date=due_date) }}"
          - service: todo.update_item
            target:
              entity_id: !input todo_entity
            data: "{{ update_data }}"
          - variables:
              response:
                status: "success"
                message: "Item updated successfully"
          - stop: ""
            response_variable: response
    default:
      - variables:
          response:
            error: "Unknown action type"
      - stop: "Unknown action"
        response_variable: response