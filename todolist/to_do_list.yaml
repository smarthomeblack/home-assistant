blueprint:
  name: To-Do List Manager
  author: smarthomeblack
  description: |
    # Tool for managing a Home Assistant to-do list with LLM integration
    
    ## Blueprint Setup
    
    ### Required
    * The Home Assistant todo integration must be installed and configured.
    
    ### Optional
    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.
    
    ### Note
    * Provide a concise and precise description for the script. This will be utilized by the LLM to understand it should use this script for managing to-do items.
    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    todo_settings:
      name: Settings for To-Do List
      icon: mdi:format-list-checkbox
      description: Configure the to-do list entity for actions.
      input:
        todo_entity:
          name: To-Do List Entity
          description: The entity_id of the to-do list (e.g. todo.viec_can_lam)
          selector:
            entity:
              domain: todo
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        action_type_prompt:
          name: Action Type Prompt
          description: The prompt for the LLM to select the action type.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.
            Return exactly one of the following options: add_item, get_items, remove_item, remove_completed_items, update_item.
            Return only the word, without quotes or extra text.
            - add_item: Add a new to-do item
            - get_items: Get list of to-do items (all or filtered by status)
            - remove_item: Permanently delete a specific item (requires item_uid)
            - remove_completed_items: Remove all completed items
            - update_item: Update an existing item (requires item_uid)
            For remove_item and update_item: Always call get_items first to retrieve the UID of the target item.
        task_name_prompt:
          name: Task Name Prompt
          description: The prompt for the LLM to provide the task name when adding new item.
          selector:
            text:
              multiline: true
          default: >-
            Required for: add_item
            Provide the name/summary of the new to-do item.
            No extra commentary, no markdown or emojis.
            Return only the task name.
        item_uid_prompt:
          name: Item UID Prompt
          description: The prompt for the LLM to provide the item UID for removal or update.
          selector:
            text:
              multiline: true
          default: >-
            Required for: remove_item, update_item
            Always call get_items first to retrieve the UID of the target item.
            The UID is a long unique identifier (e.g., 6901dc38-a61a-11f0-ad85-bc24112f1158).
            Return only the UID value, no extra text.
        task_description_prompt:
          name: Task Description Prompt
          description: The prompt for the LLM to provide the task description.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            Provide detailed information about the to-do item if user requests it.
            If user doesn't provide description, leave blank.
            No links, no markdown/emojis, no additional commentary.
            Return only the description text.
        due_date_prompt:
          name: Due Date Prompt
          description: The prompt for the LLM to provide the due date.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            If user provides only a date (no time), return in format: YYYY-MM-DD (e.g., 2025-10-11)
            If user provides both date and time, use due_datetime field instead (leave this blank).
            Never provide both due_date and due_datetime at the same time.
        due_datetime_prompt:
          name: Due Datetime Prompt
          description: The prompt for the LLM to provide the due datetime.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: add_item, update_item
            If user provides both date and time, return in format: YYYY-MM-DD HH:MM:SS (e.g., 2025-10-11 14:13:00)
            If user provides only a date (no time), use due_date field instead (leave this blank).
            Never provide both due_date and due_datetime at the same time.
        rename_prompt:
          name: Rename Prompt
          description: The prompt for the LLM to provide the new task name when updating.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: update_item only
            If user wants to rename the task, provide the new name.
            If user doesn't want to rename, leave blank.
            Return only the new task name, no extra text.
        status_prompt:
          name: Status Prompt
          description: The prompt for the LLM to provide the task status.
          selector:
            text:
              multiline: true
          default: >-
            Optional for: update_item, get_items
            For update_item: Provide the status if user wants to change it.
            - needs_action: Task not completed yet
            - completed: Task is completed
            For get_items: Filter items by status (can provide multiple values separated by comma).
            - needs_action: Get only incomplete tasks
            - completed: Get only completed tasks
            - Leave blank: Get all tasks
            If not changing status (for update_item) or not filtering (for get_items), leave blank.
mode: queued
max: 30
max_exceeded: silent
variables:
  version: 20251011_v2
fields:
  action_type:
    name: Action Type
    description: !input action_type_prompt
    selector:
      select:
        options:
          - add_item
          - get_items
          - remove_item
          - remove_completed_items
          - update_item
    required: true
  task_name:
    name: Task Name
    description: !input task_name_prompt
    selector:
      text:
    required: false
  item_uid:
    name: Item UID
    description: !input item_uid_prompt
    selector:
      text:
    required: false
  task_description:
    name: Task Description
    description: !input task_description_prompt
    selector:
      text:
        multiline: true
    required: false
  due_date:
    name: Due Date
    description: !input due_date_prompt
    selector:
      text:
    required: false
  due_datetime:
    name: Due Datetime
    description: !input due_datetime_prompt
    selector:
      text:
    required: false
  rename:
    name: Rename
    description: !input rename_prompt
    selector:
      text:
    required: false
  status:
    name: Status
    description: !input status_prompt
    selector:
      text:
    required: false
sequence:
  - variables:
      todo_entity: !input todo_entity
      action_type: "{{ action_type | default('get_items') | trim }}"
      task_name: "{{ task_name | default('') | trim }}"
      item_uid: "{{ item_uid | default('') | trim }}"
      task_description: "{{ task_description | default('') | trim }}"
      due_date: "{{ due_date | default('') | trim }}"
      due_datetime: "{{ due_datetime | default('') | trim }}"
      rename: "{{ rename | default('') | trim }}"
      status_input: "{{ status | default('') | trim }}"
  - alias: Validate inputs
    if:
      - condition: template
        value_template: >-
          {{
            (not todo_entity)
            or (action_type not in ['add_item', 'get_items', 'remove_item', 'remove_completed_items', 'update_item'])
            or (action_type == 'add_item' and not task_name)
            or (action_type in ['remove_item', 'update_item'] and not item_uid)
          }}
    then:
      - variables:
          response:
            error: >-
              Invalid inputs. Required fields:
              - add_item: task_name
              - remove_item: item_uid
              - update_item: item_uid
      - stop: Invalid inputs
        response_variable: response
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'add_item' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ due_datetime | length > 0 }}"
                sequence:
                  - service: todo.add_item
                    target:
                      entity_id: !input todo_entity
                    data:
                      item: "{{ task_name }}"
                      description: "{{ task_description }}"
                      due_datetime: "{{ due_datetime }}"
              - conditions:
                  - condition: template
                    value_template: "{{ due_date | length > 0 }}"
                sequence:
                  - service: todo.add_item
                    target:
                      entity_id: !input todo_entity
                    data:
                      item: "{{ task_name }}"
                      description: "{{ task_description }}"
                      due_date: "{{ due_date }}"
            default:
              - service: todo.add_item
                target:
                  entity_id: !input todo_entity
                data:
                  item: "{{ task_name }}"
                  description: "{{ task_description }}"
          - variables:
              response:
                status: "success"
                message: "Task added successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'get_items' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ status_input | length > 0 }}"
                sequence:
                  - variables:
                      status_list: >-
                        {{ status_input.split(',') | map('trim') | list }}
                  - service: todo.get_items
                    target:
                      entity_id: !input todo_entity
                    data:
                      status: "{{ status_list }}"
                    response_variable: todo_items
            default:
              - service: todo.get_items
                target:
                  entity_id: !input todo_entity
                response_variable: todo_items
          - variables:
              response:
                items: "{{ todo_items[todo_entity]['items'] }}"
                status: "success"
                message: "Items retrieved successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'remove_item' }}"
        sequence:
          - service: todo.remove_item
            target:
              entity_id: !input todo_entity
            data:
              item: "{{ item_uid }}"
          - variables:
              response:
                status: "success"
                message: "Item removed successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'remove_completed_items' }}"
        sequence:
          - service: todo.remove_completed_items
            target:
              entity_id: !input todo_entity
          - variables:
              response:
                status: "success"
                message: "All completed items removed successfully"
          - stop: ""
            response_variable: response
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'update_item' }}"
        sequence:
          - variables:
              update_data:
                item: "{{ item_uid }}"
          - if:
              - condition: template
                value_template: "{{ rename | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, rename=rename) }}"
          - if:
              - condition: template
                value_template: "{{ status_input | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, status=status_input) }}"
          - if:
              - condition: template
                value_template: "{{ task_description | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, description=task_description) }}"
          - if:
              - condition: template
                value_template: "{{ due_datetime | length > 0 }}"
            then:
              - variables:
                  update_data: "{{ dict(update_data, due_datetime=due_datetime) }}"
            else:
              - if:
                  - condition: template
                    value_template: "{{ due_date | length > 0 }}"
                then:
                  - variables:
                      update_data: "{{ dict(update_data, due_date=due_date) }}"
          - service: todo.update_item
            target:
              entity_id: !input todo_entity
            data: "{{ update_data }}"
          - variables:
              response:
                status: "success"
                message: "Item updated successfully"
          - stop: ""
            response_variable: response
    default:
      - variables:
          response:
            error: "Unknown action type"
      - stop: "Unknown action"
        response_variable: response